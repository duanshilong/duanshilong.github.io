<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dsl-blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-02T05:16:33.852Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hubery</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue源码之双向绑定</title>
    <link href="http://yoursite.com/2019/03/02/vue%E6%BA%90%E7%A0%81%E4%B9%8B%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/03/02/vue源码之双向绑定原理/</id>
    <published>2019-03-02T04:10:47.875Z</published>
    <updated>2019-03-02T05:16:33.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="了解Object-defineProperty"><a href="#了解Object-defineProperty" class="headerlink" title="了解Object.defineProperty"></a>了解Object.defineProperty</h2><p>了解过vue绑定原理的人都知道。双向绑定的原理是利用数据劫持结合发布者–订阅者模式的方式，<strong>通过Object.defineProperty来劫持</strong>各个属性setter、getter，在数据发生变动时发布消息给订阅者，触发响应的回调函数。<br>简单了解一下Object.defineProperty，具体用法查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN</a></p><h2 id="手动实现简单的绑定"><a href="#手动实现简单的绑定" class="headerlink" title="手动实现简单的绑定"></a>手动实现简单的绑定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj  = &#123;&#125;;</span><br><span class="line">Object.defineProperty(obj, &apos;name&apos;, &#123;</span><br><span class="line">        get: function(val) &#123;</span><br><span class="line">            console.log(&apos;获取值被修改的值&apos;)</span><br><span class="line">            return val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function (newVal) &#123;</span><br><span class="line">            console.log(&apos;我被设置了&apos;+ newVal)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.name = &apos;隔壁老王&apos;;//在给obj设置name属性的时候，触发了set这个方法</span><br><span class="line">var val = obj.name;//在得到obj的name属性，会触发get方法</span><br></pre></td></tr></table></figure><p>这样我们就可以在get和set中触发其他函数，从而来实现监听数据变动的目的。<br>根据以上描述，我们可以实现一个简单的双向绑定：代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;bindDemo&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;iptVal&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var bindDemo = document.getElementById(&apos;bindDemo&apos;)</span><br><span class="line">        var iptVal = document.getElementById(&apos;iptVal&apos;)</span><br><span class="line">        var obj = &#123;&#125;</span><br><span class="line">        Object.defineProperty(obj, &apos;name&apos;,&#123;</span><br><span class="line">            get:function()&#123;</span><br><span class="line">                return val</span><br><span class="line">            &#125;,</span><br><span class="line">            set:function(newVal)&#123; // 给对象设置值得时候会触发该方法</span><br><span class="line">                console.log(newVal)</span><br><span class="line">                bindDemo.innerHTML = newVal</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        iptVal.addEventListener(&apos;input&apos;, function(e)&#123;</span><br><span class="line">            obj.name = e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">        obj.name = &apos;老李&apos; // 给obj设置了name属性从而触发了set方法</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这样就实现了一个简单的双向绑定。</p><h2 id="vue双向绑定"><a href="#vue双向绑定" class="headerlink" title="vue双向绑定"></a>vue双向绑定</h2><p>原理图镇楼：<br>…mermaid<br>graph LR</p><pre><code> MVVM -- 劫持监听所有属性 --&gt; Observer Observer --通知变化 --&gt; dep{Dep} dep{Dep} --通知变化 --&gt;Watcher Watcher --添加订阅者 --&gt;dep{Dep}MVVM -- 解析指令 --&gt; compilecompile --订阅数据变化 --&gt;Watchercompile --初始化视图 --&gt; update(updater)Watcher --更新视图 --&gt; update(updater)</code></pre><p>…<br>原理图解析：<br>1、observer的作用：通过object.defineProperty()循环劫持vue中data的所有属性值，从而利用get和set来通知订阅者<strong>Dep</strong>，从而来更新视图。<br>2、指令解析：我们都知道在vue中实现双向绑定的常用指令有：v-model，v-text,双花括号等等。也就是说在渲染html节点时，碰到这些指令的时候会进行指令解析。每碰到一个指令，就会在Dep中增加一个订阅者，这个订阅者只是更新自己指令对应的数据。每当set方法触发，就会循环触发Dep中对应的订阅者。<br>实现一个observer监听器，通过递归的方法遍历所有的对象以及对象中的对象也就是属性值，从而来监听所有的属性</p><h3 id="所有对象的属性劫持"><a href="#所有对象的属性劫持" class="headerlink" title="所有对象的属性劫持"></a>所有对象的属性劫持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;bindDemo&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;iptVal&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var bindDemo = document.getElementById(&apos;bindDemo&apos;)</span><br><span class="line">        var iptVal = document.getElementById(&apos;iptVal&apos;)</span><br><span class="line">        function defineReactive(obj,key,val)&#123;</span><br><span class="line">            observe(val);</span><br><span class="line">            Object.defineProperty(obj, key, &#123;</span><br><span class="line">                get: function()&#123;</span><br><span class="line">                    //在这里进行依赖收集</span><br><span class="line">                    return val</span><br><span class="line">                &#125;,</span><br><span class="line">                set: function(newVal)&#123;</span><br><span class="line">                    if(newVal === val) return</span><br><span class="line">                    console.log(newVal)</span><br><span class="line">                    iptVal.value = newVal</span><br><span class="line">                    bindDemo.innerHTML = newVal</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        /**通过遍历所有属性的方式对这个obj进行defineReactive的处理***/ </span><br><span class="line">        function observe (obj) &#123;</span><br><span class="line">            debugger</span><br><span class="line">            if(!obj || (typeof obj !==&apos;object&apos;)) &#123;</span><br><span class="line">                return</span><br><span class="line">            &#125; </span><br><span class="line">            Object.keys(obj).forEach(function(key)&#123;</span><br><span class="line">                defineReactive(obj, key, obj[key]);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        var dataList =&#123;</span><br><span class="line">            person:&#123;</span><br><span class="line">                name: &apos;老王&apos;,</span><br><span class="line">                age: &apos;17&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        observe(dataList)</span><br><span class="line">        iptVal.addEventListener(&apos;input&apos;, function(e) &#123;</span><br><span class="line">            // 给obj的name属性赋值，进而触发该属性的set方法</span><br><span class="line">            dataList.person.name = e.target.value;</span><br><span class="line">        &#125;);</span><br><span class="line">        dataList.person.name = &apos;老李&apos;</span><br><span class="line">        // 这样就实现了所有的对象以及属性的监听</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以上代码实现了对象属性值的劫持，下面通过解析指令实现对view和model的绑定</p><h3 id="指令解析"><a href="#指令解析" class="headerlink" title="指令解析"></a>指令解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> /** 解析指令，实现对view和model的绑定*/ </span><br><span class="line"> compile(root,vm)&#123;</span><br><span class="line">       // var _this = this</span><br><span class="line">var nodes =root.children</span><br><span class="line">       // 节点类型为元素</span><br><span class="line">       for (let i = 0; i &lt; nodes.length; i++) &#123;</span><br><span class="line">           var node = nodes[i]</span><br><span class="line">           if (node.children.length) &#123;</span><br><span class="line">               vm.compile(node,vm)</span><br><span class="line">           &#125;</span><br><span class="line">           if (node.hasAttribute(&apos;v-click&apos;)) &#123;</span><br><span class="line">              node.onclick=(function(e)&#123;</span><br><span class="line">                   var attrval = nodes[i].getAttribute(&apos;v-click&apos;)</span><br><span class="line">                   console.log(attrval)</span><br><span class="line">                   return vm.methods[attrval].bind(vm.data)</span><br><span class="line">              &#125;)()</span><br><span class="line">           &#125;</span><br><span class="line">           if (node.hasAttribute(&apos;v-model&apos;)&amp;&amp;(node.tagName == &apos;INPUT&apos; || node.tagName == &apos;TEXTAREA&apos; )) &#123;</span><br><span class="line">               node.addEventListener(&apos;input&apos;,(function(e)&#123;</span><br><span class="line">                   var name= node.getAttribute(&apos;v-model&apos;)</span><br><span class="line">                   new watcher(vm, node, name, &apos;value&apos;) </span><br><span class="line">                   return function()&#123;</span><br><span class="line">                       vm.data[name] = nodes[e].value</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)(i))</span><br><span class="line">           &#125;</span><br><span class="line">           if (node.hasAttribute(&apos;v-bind&apos;)) &#123;</span><br><span class="line">               var name = node.getAttribute(&apos;v-bind&apos;)</span><br><span class="line">               new watcher(vm, node, name, &apos;innerHTML&apos;) </span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="订阅器"><a href="#订阅器" class="headerlink" title="订阅器"></a>订阅器</h3><p>创建一个可以容纳订阅者的消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后在属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是list，将上面的Observer稍微改造下，植入消息订阅器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> defineReactive (obj,key,val)&#123;</span><br><span class="line">    const dep = new Dep()</span><br><span class="line">    Object.defineProperty(obj,key,&#123;</span><br><span class="line">        enumerable: true,</span><br><span class="line">        configurable: true,</span><br><span class="line">        get:function()&#123;</span><br><span class="line">            /*****进行依赖收集（需要一个方法）将Dep.target（即当前的Watcher对象存入dep的subs中）******/</span><br><span class="line">            if (Dep.target) &#123;</span><br><span class="line">                dep.addsub(Dep.target)</span><br><span class="line">            &#125;</span><br><span class="line">            return val </span><br><span class="line">        &#125;,</span><br><span class="line">        set:function(newVal)&#123;</span><br><span class="line">            if (newVal === val) return</span><br><span class="line">            val = newVal</span><br><span class="line">            dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 构造订阅者Dep</span><br><span class="line">class Dep &#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        /* 用来存放Watcher对象的数组 */</span><br><span class="line">        this.subs = []</span><br><span class="line">    &#125;</span><br><span class="line">    /*在subs中添加一个watch对象*/</span><br><span class="line">    addsub(sub)&#123;</span><br><span class="line">        this.subs.push(sub)</span><br><span class="line">    &#125;</span><br><span class="line">    /*通知所有对象更新视图*/ </span><br><span class="line">    notify()&#123;</span><br><span class="line">        this.subs.forEach((sub) =&gt;&#123;</span><br><span class="line">            sub.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码上看，我们将订阅器Dep添加一个订阅者设计在getter里面，这是为了让Watcher初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在setter函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整Observer已经实现了，接下来我们开始设计Watcher。</p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>我们知道，监听器Observer是在get函数执行了添加订阅者Wather的操作的，所以我们只要在订阅者Watcher初始化的时候触发对应的get函数去执行添加订阅者操作即可。而触发get函数只要获取对应的属性值就可以了。核心原因就是因为我们使用了Object.defineProperty( )进行数据监听。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> class watcher&#123;</span><br><span class="line">  constructor(vm, node, name, type)&#123;</span><br><span class="line">       /* 在new一个Watcher对象时将该对象赋值给Dep.target，在get中会用到 */</span><br><span class="line">       Dep.target = this</span><br><span class="line">       this.name = name //指令对应的值</span><br><span class="line">       this.node = node //节点</span><br><span class="line">       this.vm = vm     //指令所属Vue</span><br><span class="line">       this.type = type //绑定的属性值，本例为InnerHTML</span><br><span class="line">       this.update()</span><br><span class="line">       Dep.target = null</span><br><span class="line">   &#125;</span><br><span class="line">   update() &#123;</span><br><span class="line">       this.get()</span><br><span class="line">       // this.node.nodeValue = this.value </span><br><span class="line">       this.node[this.type] = this.value </span><br><span class="line">   &#125;</span><br><span class="line">   get() &#123;</span><br><span class="line">       this.value = this.vm.data[this.name]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到此为止，vue双向绑定的原理基本实现。这篇文章只是粗略的的概述了一下vue双向绑定的原理。本文的完整代码请参考<a href="https://github.com/duanshilong/the-way-of-VueBind/blob/master/index.html" target="_blank" rel="noopener">这里</a>。如果你觉得还行的话点个赞就行。如果发现有什么不足的话，欢迎指出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;了解Object-defineProperty&quot;&gt;&lt;a href=&quot;#了解Object-defineProperty&quot; class=&quot;headerlink&quot; title=&quot;了解Object.defineProperty&quot;&gt;&lt;/a&gt;了解Object.definePr
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>探究promise原理</title>
    <link href="http://yoursite.com/2019/02/27/%E6%8E%A2%E7%A9%B6promise%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/02/27/探究promise原理/</id>
    <published>2019-02-27T14:55:39.116Z</published>
    <updated>2019-03-02T04:10:22.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是promise"><a href="#什么是promise" class="headerlink" title="什么是promise"></a>什么是promise</h2><p>Promise是JS异步编程中的重要概念，异步抽象处理对象，是目前比较流行Javascript异步编程解决方案之一</p><h2 id="常用的异步编程方案"><a href="#常用的异步编程方案" class="headerlink" title="常用的异步编程方案"></a>常用的异步编程方案</h2><ul><li>回调函数</li><li>事件监听</li><li>发布/订阅（之后文章了解）</li><li>promise</li></ul><h2 id="promise标准"><a href="#promise标准" class="headerlink" title="promise标准"></a>promise标准</h2><p> 1.Promise 规范有很多，如Promise/A，Promise/B，Promise/D 以及 Promise/A 的升级版 Promise/A+。ES6 中采用了 Promise/A+ 规范，这里了解的也是Promise/A+ 的实现原理。<br> 2.Promise标准解读<br> 在之前一章有了解过promise的状态变化以及基本的使用方法，所以直接略过，直奔主题，了解promise的实现过程</p><h2 id="从里到外解剖promise"><a href="#从里到外解剖promise" class="headerlink" title="从里到外解剖promise"></a>从里到外解剖promise</h2><p>手动实现promise，需要先了解promise的执行流程以及在流程中调用的方法？</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[new promise] --&gt;B(pendding)</span><br><span class="line">B --fulfilled --&gt; C(resolve) </span><br><span class="line">B--rejected --&gt; D(reject)</span><br><span class="line">C --&gt; E(onFulfilled)</span><br><span class="line">D --&gt; F(onRejected )</span><br><span class="line">E --&gt;G(promise)</span><br><span class="line">F --&gt;G</span><br></pre></td></tr></table></figure><ol><li>new一个promise实例，瞬间执行(初始状态)，状态为pending</li><li>new Promise接收一个excutor执行函数，excutor携带连个函数类型参数resolve和 reject</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const promise = new promise((resolve, reject) =&gt;&#123;</span><br><span class="line">// 异步处理</span><br><span class="line">      // 处理结束后、调用resolve 或 reject</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>调用resolve，状态由pending –&gt; fulfiled。调用reject，状态由pending –&gt; rejected。<strong><em>注意：一旦状态更改就不能再次发生变化。</em></strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function Promise()&#123;</span><br><span class="line">let that = self // 缓存当前实例</span><br><span class="line">that.status = &apos;pending&apos;  // 初始状态</span><br><span class="line">that.data = undifined //成功时的返回值</span><br><span class="line">that.reason = undifined //保存失败的原因</span><br><span class="line">that.onFulfilledCallbacks = []; // 存储fulfilled状态对应的onFulfilled函数，可能有多个</span><br><span class="line">    that.onRejectedCallbacks = []; // 存储rejected状态对应的onRejected函数，可能有多个</span><br><span class="line">    // 成功时调用的方法</span><br><span class="line">    function resolve(value) &#123;</span><br><span class="line">       if(self.status === &apos;pending&apos;) &#123;</span><br><span class="line">           self.status = &apos;resolved&apos;;</span><br><span class="line">           self.data = value;</span><br><span class="line">           for(var i = 0; i &lt; self.onFulfilledCallbacks.length; i++) &#123;</span><br><span class="line">               self.onResolvedCallback[i](value);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   // 失败时调用的方法</span><br><span class="line">   function reject(reason) &#123;</span><br><span class="line">   if(self.status === &apos;pending&apos;) &#123;</span><br><span class="line">            self.status = &apos;rejected&apos;;</span><br><span class="line">            self.data = reason;</span><br><span class="line">            for(var i = 0; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class="line">                self.onRejectedCallback[i](reason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">// executor自执行函数接收的第二个参数为reject函数</span><br><span class="line">//且reject函数在promise对象状态变为rejected时或executor抛出异常时触发</span><br><span class="line">try &#123;</span><br><span class="line">       executor(resolve, reject);</span><br><span class="line">&#125; catch (e)&#123;</span><br><span class="line">    reject(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Promise.prototype.then = function (onResolve, onReject) &#123;</span><br><span class="line">    this.onResolvedCallback.push(onResolve);</span><br><span class="line">    this.onRejectedCallback.push(onReject);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>兴高采烈，试试深浅~~~~妈呀<br>好像并没有什么卵用？<br>仔细一看，虎躯一震？当我们在调用then回调之前，resolve已经执行结束了？<br><img src="https://img-blog.csdnimg.cn/20190227155455391.jpg" alt="在这里插入图片描述"></p><p>用高大上的语言来表达：<br><strong>2.2.4规范 onFulfilled 和 onRejected 只允许在 execution context 栈仅包含平台代码时运行.<br>       这里的平台代码指的是引擎、环境以及 promise 的实施代码。实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then 方法被调用的那一轮事件循环之后的新执行栈中执行。</strong><br>    <strong>总结一下就是需要将promise的resolve和reject异步执行</strong></p><p>修改一下，可以利用setTimeout机制，将resolve中执行回调的逻辑放置到JS任务队列末尾，以保证在resolve执行时，then方法的回调函数已经注册完成.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">添加个异步</span><br><span class="line">// 成功时调用的方法</span><br><span class="line">    function resolve(value) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">       if(self.status === &apos;pending&apos;) &#123;</span><br><span class="line">           that.status = &apos;resolved&apos;;</span><br><span class="line">           that.data = value;</span><br><span class="line">           for(var i = 0; i &lt; self.onFulfilledCallbacks.length; i++) &#123;</span><br><span class="line">               self.onResolvedCallback[i](value);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;,0)</span><br><span class="line">   &#125;</span><br><span class="line">   // 失败时调用的方法</span><br><span class="line">   function reject(reason) &#123;</span><br><span class="line">   setTimeout(function () &#123;</span><br><span class="line">   if(self.status === &apos;pending&apos;) &#123;</span><br><span class="line">            that.status = &apos;rejected&apos;;</span><br><span class="line">            that.data = reason;</span><br><span class="line">            for(var i = 0; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class="line">                self.onRejectedCallback[i](reason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,0)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>总结：<br>1.executor函数作为实参在创建Promise对象时传入Promise构造函数。<br>2.resolve和reject函数作为实参传入executor函数。<br>3.value作为实参传入resolve和reject函数。<br>4.promise的resolve和reject需要异步执行</p><h2 id="then"><a href="#then" class="headerlink" title="then"></a>then</h2><p> Promise/A+ 规范中规定then方法用来注册promise对象状态改变时的回调，且返回一个新的promise对象。而上述代码并没有满足这个规范，那么~~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * resolve中的值几种情况：</span><br><span class="line"> * 1.普通值</span><br><span class="line"> * 2.promise对象</span><br><span class="line"> * 3.thenable对象/函数</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 对resolve 进行改造增强 针对resolve中不同值情况 进行处理</span><br><span class="line"> * @param  &#123;promise&#125; promise2 promise1.then方法返回的新的promise对象</span><br><span class="line"> * @param  &#123;[type]&#125; x         promise1中onFulfilled的返回值</span><br><span class="line"> * @param  &#123;[type]&#125; resolve   promise2的resolve方法</span><br><span class="line"> * @param  &#123;[type]&#125; reject    promise2的reject方法</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function resolvePromise(promise2, x, resolve, reject) &#123;</span><br><span class="line">    var then</span><br><span class="line">    var thenCalledOrThrow = false</span><br><span class="line"></span><br><span class="line">    if (promise2 === x) &#123;</span><br><span class="line">        return reject(new TypeError(&apos;Chaining cycle detected for promise!&apos;))</span><br><span class="line">    &#125;</span><br><span class="line">    if (x instanceof Promise) &#123;</span><br><span class="line">        if (x.status === &apos;pending&apos;) &#123; //because x could resolved by a Promise Object</span><br><span class="line">            x.then(function(v) &#123;</span><br><span class="line">                resolvePromise(promise2, v, resolve, reject)</span><br><span class="line">            &#125;, reject)</span><br><span class="line">        &#125; else &#123; //but if it is resolved, it will never resolved by a Promise Object but a static value;</span><br><span class="line">            x.then(resolve, reject)</span><br><span class="line">        &#125;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ((x !== null) &amp;&amp; ((typeof x === &apos;object&apos;) || (typeof x === &apos;function&apos;))) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            then = x.then //because x.then could be a getter</span><br><span class="line">            if (typeof then === &apos;function&apos;) &#123;</span><br><span class="line">                then.call(x, function rs(y) &#123;</span><br><span class="line">                    if (thenCalledOrThrow) return</span><br><span class="line">                    thenCalledOrThrow = true</span><br><span class="line">                    return resolvePromise(promise2, y, resolve, reject)</span><br><span class="line">                &#125;, function rj(r) &#123;</span><br><span class="line">                    if (thenCalledOrThrow) return</span><br><span class="line">                    thenCalledOrThrow = true</span><br><span class="line">                    return reject(r)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resolve(x)</span><br><span class="line">             &#125;</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            if (thenCalledOrThrow) return</span><br><span class="line">            thenCalledOrThrow = true</span><br><span class="line">            return reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Promise.prototype.then = function (onResolved, onRejected) &#123;</span><br><span class="line">  var self = this</span><br><span class="line">    var promise2</span><br><span class="line">    onResolved = typeof onResolved === &apos;function&apos; ? onResolved : function(v) &#123;</span><br><span class="line">        return v</span><br><span class="line">    &#125;</span><br><span class="line">    onRejected = typeof onRejected === &apos;function&apos; ? onRejected : function(r) &#123;</span><br><span class="line">        throw r</span><br><span class="line">    &#125;</span><br><span class="line">    //promise对象当前状态为resolved</span><br><span class="line">    if(self.status === &apos;resolved&apos;) &#123;</span><br><span class="line"> return promise2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">            setTimeout(function() &#123; // 异步执行onResolved</span><br><span class="line">                try &#123;</span><br><span class="line">                    var x = onResolved(self.data)</span><br><span class="line">                    resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                &#125; catch (reason) &#123;</span><br><span class="line">                    reject(reason)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    //promise对象当前状态为rejected</span><br><span class="line">if (self.status === &apos;rejected&apos;) &#123;</span><br><span class="line">        return promise2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">            setTimeout(function() &#123; // 异步执行onRejected</span><br><span class="line">                try &#123;</span><br><span class="line">                    var x = onRejected(self.data)</span><br><span class="line">                    resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                &#125; catch (reason) &#123;</span><br><span class="line">                    reject(reason)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    //promise对象当前状态为pending</span><br><span class="line">    //此时并不能确定调用onResolved还是onRejected，需要等当前Promise状态确定。</span><br><span class="line">    //所以需要将callBack放入promise1的回调数组中</span><br><span class="line">   if (self.status === &apos;pending&apos;) &#123;</span><br><span class="line">        return promise2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">            self.onResolvedCallback.push(function(value) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    var x = onResolved(value)</span><br><span class="line">                    resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                &#125; catch (r) &#123;</span><br><span class="line">                    reject(r)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            self.onRejectedCallback.push(function(reason) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    var x = onRejected(reason)</span><br><span class="line">                    resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                &#125; catch (r) &#123;</span><br><span class="line">                    reject(r)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line">var Promise = (function() &#123;</span><br><span class="line">    function Promise(resolver) &#123;</span><br><span class="line">        if (typeof resolver !== &apos;function&apos;) &#123; //resolver必须是函数</span><br><span class="line">            throw new TypeError(&apos;Promise resolver &apos; + resolver + &apos; is not a function&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">        if (!(this instanceof Promise)) return new Promise(resolver)</span><br><span class="line"></span><br><span class="line">        var self = this //保存this</span><br><span class="line">        self.callbacks = [] //保存onResolve和onReject函数集合</span><br><span class="line">        self.status = &apos;pending&apos; //当前状态</span><br><span class="line"></span><br><span class="line">        function resolve(value) &#123;</span><br><span class="line">            setTimeout(function() &#123; //异步调用</span><br><span class="line">                if (self.status !== &apos;pending&apos;) &#123;</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                self.status = &apos;resolved&apos; //修改状态</span><br><span class="line">                self.data = value</span><br><span class="line"></span><br><span class="line">                for (var i = 0; i &lt; self.callbacks.length; i++) &#123;</span><br><span class="line">                    self.callbacks[i].onResolved(value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function reject(reason) &#123;</span><br><span class="line">            setTimeout(function()&#123; //异步调用</span><br><span class="line">                if (self.status !== &apos;pending&apos;) &#123;</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                self.status = &apos;rejected&apos; //修改状态</span><br><span class="line">                self.data = reason</span><br><span class="line"></span><br><span class="line">                for (var i = 0; i &lt; self.callbacks.length; i++) &#123;</span><br><span class="line">                    self.callbacks[i].onRejected(reason)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            resolver(resolve, reject) //执行resolver函数</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function resolvePromise(promise, x, resolve, reject) &#123;</span><br><span class="line">        var then</span><br><span class="line">        var thenCalledOrThrow = false</span><br><span class="line"></span><br><span class="line">        if (promise === x) &#123;</span><br><span class="line">            return reject(new TypeError(&apos;Chaining cycle detected for promise!&apos;))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ((x !== null) &amp;&amp; ((typeof x === &apos;object&apos;) || (typeof x === &apos;function&apos;))) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                then = x.then</span><br><span class="line">                if (typeof then === &apos;function&apos;) &#123;</span><br><span class="line">                    then.call(x, function rs(y) &#123;</span><br><span class="line">                        if (thenCalledOrThrow) return</span><br><span class="line">                        thenCalledOrThrow = true</span><br><span class="line">                        return resolvePromise(promise, y, resolve, reject)</span><br><span class="line">                    &#125;, function rj(r) &#123;</span><br><span class="line">                        if (thenCalledOrThrow) return</span><br><span class="line">                        thenCalledOrThrow = true</span><br><span class="line">                        return reject(r)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return resolve(x)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch(e) &#123;</span><br><span class="line">                if (thenCalledOrThrow) return</span><br><span class="line">                thenCalledOrThrow = true</span><br><span class="line">                return reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.prototype.then = function(onResolved, onRejected) &#123;</span><br><span class="line">        //健壮性处理，处理点击穿透</span><br><span class="line">        onResolved = typeof onResolved === &apos;function&apos; ? onResolved : function(v)&#123;return v&#125;</span><br><span class="line">        onRejected = typeof onRejected === &apos;function&apos; ? onRejected : function(r)&#123;throw r&#125;</span><br><span class="line">        var self = this</span><br><span class="line">        var promise2</span><br><span class="line"></span><br><span class="line">        //promise状态为resolved</span><br><span class="line">        if (self.status === &apos;resolved&apos;) &#123;</span><br><span class="line">            return promise2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">                setTimeout(function() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //调用then方法的onResolved回调</span><br><span class="line">                        var x = onResolved(self.data)</span><br><span class="line">                        //根据x的值修改promise2的状态</span><br><span class="line">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; catch(e) &#123;</span><br><span class="line">                        //promise2状态变为rejected</span><br><span class="line">                        return reject(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //promise状态为rejected</span><br><span class="line">        if (self.status === &apos;rejected&apos;) &#123;</span><br><span class="line">            return promise2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">                setTimeout(function() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //调用then方法的onReject回调</span><br><span class="line">                        var x = onRejected(self.data)</span><br><span class="line">                        //根据x的值修改promise2的状态</span><br><span class="line">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; catch(e) &#123;</span><br><span class="line">                        //promise2状态变为rejected</span><br><span class="line">                        return reject(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //promise状态为pending</span><br><span class="line">        //需要等待promise的状态改变</span><br><span class="line">        if (self.status === &apos;pending&apos;) &#123;</span><br><span class="line">            return promise2 = new Promise(function(resolve, reject) &#123;</span><br><span class="line">                self.callbacks.push(&#123;</span><br><span class="line">                    onResolved: function(value) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //调用then方法的onResolved回调</span><br><span class="line">                            var x = onResolved(value)</span><br><span class="line">                            //根据x的值修改promise2的状态</span><br><span class="line">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                        &#125; catch(e) &#123;</span><br><span class="line">                            //promise2状态变为rejected</span><br><span class="line">                            return reject(e)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    onRejected: function(reason) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            //调用then方法的onResolved回调</span><br><span class="line">                            var x = onRejected(reason)</span><br><span class="line">                            //根据x的值修改promise2的状态</span><br><span class="line">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                        &#125; catch(e) &#123;</span><br><span class="line">                            //promise2状态变为rejected</span><br><span class="line">                            return reject(e)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取当前Promise传递的值</span><br><span class="line">    Promise.prototype.valueOf = function() &#123;</span><br><span class="line">        return this.data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //由then方法实现catch方法</span><br><span class="line">    Promise.prototype.catch = function(onRejected) &#123;</span><br><span class="line">        return this.then(null, onRejected)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //finally方法</span><br><span class="line">    Promise.prototype.finally = function(fn) &#123;</span><br><span class="line">        return this.then(function(v)&#123;</span><br><span class="line">            setTimeout(fn)</span><br><span class="line">            return v</span><br><span class="line">        &#125;, function(r)&#123;</span><br><span class="line">            setTimeout(fn)</span><br><span class="line">            throw r</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.prototype.spread = function(fn, onRejected) &#123;</span><br><span class="line">        return this.then(function(values) &#123;</span><br><span class="line">            return fn.apply(null, values)</span><br><span class="line">        &#125;, onRejected)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.prototype.inject = function(fn, onRejected) &#123;</span><br><span class="line">        return this.then(function(v) &#123;</span><br><span class="line">            return fn.apply(null, fn.toString().match(/\((.*?)\)/)[1].split(&apos;,&apos;).map(function(key)&#123;</span><br><span class="line">                return v[key];</span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;, onRejected)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.prototype.delay = function(duration) &#123;</span><br><span class="line">        return this.then(function(value) &#123;</span><br><span class="line">            return new Promise(function(resolve, reject) &#123;</span><br><span class="line">                setTimeout(function() &#123;</span><br><span class="line">                    resolve(value)</span><br><span class="line">                &#125;, duration)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, function(reason) &#123;</span><br><span class="line">            return new Promise(function(resolve, reject) &#123;</span><br><span class="line">                setTimeout(function() &#123;</span><br><span class="line">                    reject(reason)</span><br><span class="line">                &#125;, duration)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.all = function(promises) &#123;</span><br><span class="line">        return new Promise(function(resolve, reject) &#123;</span><br><span class="line">            var resolvedCounter = 0</span><br><span class="line">            var promiseNum = promises.length</span><br><span class="line">            var resolvedValues = new Array(promiseNum)</span><br><span class="line">            for (var i = 0; i &lt; promiseNum; i++) &#123;</span><br><span class="line">                (function(i) &#123;</span><br><span class="line">                    Promise.resolve(promises[i]).then(function(value) &#123;</span><br><span class="line">                        resolvedCounter++</span><br><span class="line">                        resolvedValues[i] = value</span><br><span class="line">                        if (resolvedCounter == promiseNum) &#123;</span><br><span class="line">                            return resolve(resolvedValues)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, function(reason) &#123;</span><br><span class="line">                        return reject(reason)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.race = function(promises) &#123;</span><br><span class="line">        return new Promise(function(resolve, reject) &#123;</span><br><span class="line">            for (var i = 0; i &lt; promises.length; i++) &#123;</span><br><span class="line">                Promise.resolve(promises[i]).then(function(value) &#123;</span><br><span class="line">                    return resolve(value)</span><br><span class="line">                &#125;, function(reason) &#123;</span><br><span class="line">                    return reject(reason)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.resolve = function(value) &#123;</span><br><span class="line">        var promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">            resolvePromise(promise, value, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">        return promise</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.reject = function(reason) &#123;</span><br><span class="line">        return new Promise(function(resolve, reject) &#123;</span><br><span class="line">            reject(reason)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.fcall = function(fn)&#123;</span><br><span class="line">        // 虽然fn可以接收到上一层then里传来的参数，但是其实是undefined，所以跟没有是一样的，因为resolve没参数啊</span><br><span class="line">        return Promise.resolve().then(fn)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.done = Promise.stop = function()&#123;</span><br><span class="line">        return new Promise(function()&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Promise.deferred = Promise.defer = function() &#123;</span><br><span class="line">        var dfd = &#123;&#125;</span><br><span class="line">        dfd.promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">            dfd.resolve = resolve</span><br><span class="line">            dfd.reject = reject</span><br><span class="line">        &#125;)</span><br><span class="line">        return dfd</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123; // CommonJS compliance</span><br><span class="line">        module.exports = Promise</span><br><span class="line">    &#125; catch(e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    return Promise</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>参考文章：<br><a href="https://juejin.im/post/5aa7868b6fb9a028dd4de672%22" target="_blank" rel="noopener">Promise原理讲解 &amp;&amp; 实现一个Promise对象 (遵循Promise/A+规范)</a><br><a href="https://www.jianshu.com/p/b4f0425b22a1" target="_blank" rel="noopener">Promise原理与实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是promise&quot;&gt;&lt;a href=&quot;#什么是promise&quot; class=&quot;headerlink&quot; title=&quot;什么是promise&quot;&gt;&lt;/a&gt;什么是promise&lt;/h2&gt;&lt;p&gt;Promise是JS异步编程中的重要概念，异步抽象处理对象，是目前比较流行J
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>快速认识promise</title>
    <link href="http://yoursite.com/2019/02/26/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8promise/"/>
    <id>http://yoursite.com/2019/02/26/快速使用promise/</id>
    <published>2019-02-26T14:45:55.691Z</published>
    <updated>2019-03-02T04:10:16.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、为什么要用Promise？（es6）"><a href="#1、为什么要用Promise？（es6）" class="headerlink" title="1、为什么要用Promise？（es6）"></a>1、为什么要用Promise？（es6）</h2><p>当我们使用js的异步调用时通常喜欢使用回调函数，这样代码便于理解。但是当回调嵌套的时候会造成代码混乱，不好梳理，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function(arg1,</span><br><span class="line">    function()&#123;</span><br><span class="line">        function(arg2,</span><br><span class="line">            function()&#123; </span><br><span class="line">                function(arg3,</span><br><span class="line">                    fucntion()&#123; </span><br><span class="line">                            ...... &#125;</span><br><span class="line">                    ) </span><br><span class="line">                &#125;)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></p><p>像上面代码，无穷嵌套会造成代码混乱。而Promise的最大好处就是避免‘无穷的回调噩梦’，<br>上述代码用promise处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var p = new Promise(function(resolve,reject&#123;&#125;)</span><br><span class="line">.then(function(data)&#123;&#125;)</span><br><span class="line">.then(function()&#123;&#125;)</span><br></pre></td></tr></table></figure><p>这是Promise的基本用法<br>Promise接收一个回调函数，回调函数接收两个参数，resolve（promise的状态从pending变为了fulfiled,成功时调用）、reject（promise的状态从pending变为了rejected,失败时调用），这两个都是函数，表示成功和失败的处理函数。then中接收的是上一次回调返回的结果</p><h2 id="2、promise-prototype-then"><a href="#2、promise-prototype-then" class="headerlink" title="2、promise.prototype.then()"></a>2、promise.prototype.then()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve,reject)&#123;</span><br><span class="line">console.log(&quot;promise&quot;);</span><br><span class="line">resolve();</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(&quot;setTimeout&quot;);</span><br><span class="line">&#125;,0)</span><br><span class="line">promise.then(function()&#123;</span><br><span class="line">console.log(&quot;resolved&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&quot;hi&quot;);</span><br><span class="line">//promise hi resolved setTimeout</span><br></pre></td></tr></table></figure><p>promise是创建之后立即执行，then方法指定的脚本在当前所有的同步任务完成之后再执行，setTimeout是在下一轮“时间循环”开始时执行，then在本轮时间循环结束时还行</p><h2 id="3、promise-prototype-catch"><a href="#3、promise-prototype-catch" class="headerlink" title="3、promise.prototype.catch()"></a>3、promise.prototype.catch()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve,reject)&#123;</span><br><span class="line">reject();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(function()&#123;</span><br><span class="line">console.log(&quot;resolved&quot;);</span><br><span class="line">&#125;).catch(function()&#123;</span><br><span class="line">console.log(&quot;catch the reject&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">输出 catch the reject</span><br></pre></td></tr></table></figure><h2 id="4、promise的方法有："><a href="#4、promise的方法有：" class="headerlink" title="4、promise的方法有："></a>4、promise的方法有：</h2><p>promise.resolve()<br>promise.reject()<br>promise.all()<br>promise.race()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、为什么要用Promise？（es6）&quot;&gt;&lt;a href=&quot;#1、为什么要用Promise？（es6）&quot; class=&quot;headerlink&quot; title=&quot;1、为什么要用Promise？（es6）&quot;&gt;&lt;/a&gt;1、为什么要用Promise？（es6）&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
</feed>
